import { slate } from '@plone/blocks';
import { blocksConfig } from '@plone/blocks';
import config, { type ConfigType } from '@plone/registry';
import { ContentTypeCondition } from '@plone/slots/src/helpers';
// @ts-expect-error - load-volto-addons is generated by webpack on the fly, see next.config.mjs
import applyAddonConfiguration, { addonsInfo } from 'load-volto-addons';
import Event from '@/views/Event/Event';
import Page from '@/views/Page/Page';

// applyAddonConfiguration(config);

const settings: Partial<ConfigType['settings']> = {
  slate,
  addonsInfo,
};

if (process.env.NEXT_PUBLIC_VERCEL_URL) {
  // This app is at Vercel
  if (process.env.NEXT_PRODUCTION_URL) {
    // This app is in a production deployment, so set the apiPath to the production URL
    settings.apiPath = process.env.NEXT_PRODUCTION_URL;
  } else {
    // This app is in a preview deployment, so set the apiPath to the Vercel URL
    settings.apiPath = `https://${process.env.NEXT_PUBLIC_VERCEL_URL}`;
  }
} else {
  // This app is in development, so set the apiPath to localhost
  settings.apiPath = 'http://localhost:3000/';
}

// @ts-expect-error Improve typings
config.set('settings', settings);

// @ts-expect-error Improve typings
config.set('blocks', { blocksConfig });

config.set('slots', {});

config.registerSlotComponent({
  slot: 'main',
  name: 'view',
  component: Page,
  predicates: [ContentTypeCondition(['Document', 'Plone Site'])],
});

config.registerSlotComponent({
  slot: 'main',
  name: 'view',
  component: Event,
  predicates: [ContentTypeCondition(['Event'])],
});

export default config;
